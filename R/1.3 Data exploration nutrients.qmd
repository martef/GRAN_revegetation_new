---
title: "1.3 Data exploration nutrients"
author: "MarteF"
format: html
editor: visual
---

# Packages needed

```{r}
library(tidyverse)
library(ggridges)
library(vegan)
#install.packages("vegan")
```

# Uploading and cleaning dataset

```{r}
df <- readr::read_delim('../data/PRS_results.csv', 
                                  delim = ';',
                                  col_names = TRUE)

df$Burial_Date <- dmy(df$Burial_Date)
df$Retrieval_Date <- dmy(df$Retrieval_Date)
df <- df %>%
  rename(Sublocation=Field) %>%
mutate_at(c('Sublocation', 'Plot','Location','Treatment'), as.factor) %>%
  mutate_at(c('P', 'Fe', 'Mn', 'Cu', 'Zn', 'B', 'Pb', 'Al'), as.double) %>%
  rename(NO3_N = 'NO3-N', NH4_N = 'NH4-N')

```

## Nutrient list:

NO3-N: Nitrate Nitrogen

NH4-N: Ammonium

Ca: Calcium

Mg: Magnesium

K: Potassium (Kalium)

P: Phosphorous

Fe: Iron

Mn: Manganese

Cu: Copper

Zn: Zink

B: Boron

S: Sulphur

Pb: Lead

Al: Aluminium

Cd: Cadmium

Which micronutrients do what?

K, Ca, Mg essential nutrients for plant growth

Boron, Fe, Mn, Cu, and Zn are essential micronutrients that play important roles in biochemical reactions related to plant growth.

Boron shortage affects many metabolic processes which ultimately impacts photosynthetic function ([Blevins and Lukaszewski 1998](https://cdnsciencepub.com/doi/full/10.1139/cjss-2016-0130#core-ref9)), whereas Fe is an integral part of chlorophyll that is involved in photosynthesis ([Marschner 2012](https://cdnsciencepub.com/doi/full/10.1139/cjss-2016-0130#core-ref53)). Manganese is involved in photosynthetic O~2~ evolution (Hill reaction) in the chloroplast ([Rutherford 1989](https://cdnsciencepub.com/doi/full/10.1139/cjss-2016-0130#core-ref67)) while Cu deficiency results in decreased photosynthetic electron transport ([Mizuno et al. 1982](https://cdnsciencepub.com/doi/full/10.1139/cjss-2016-0130#core-ref56)). Zinc is essential for chlorophyll synthesis, including the activation of several enzymes and oxido-reduction reactions ([Alloway 2008](https://cdnsciencepub.com/doi/full/10.1139/cjss-2016-0130#core-ref3)). In addition, micronutrients are involved in various enzymes and other physiologically active molecules associated with cell wall development, respiration, enzyme activities, and N fixation ([Rengel 2003](https://cdnsciencepub.com/doi/full/10.1139/cjss-2016-0130#core-ref63); [Schulin et al. 2010](https://cdnsciencepub.com/doi/full/10.1139/cjss-2016-0130#core-ref69)).

# Visualise variables

### Boxplots

```{r}
#Create long-format of nutrients 
df_long <- df %>% pivot_longer(12:26, names_to = 'Nutrients', values_to = "Level") %>%
  mutate(Nutrients=as.factor(Nutrients))

df_long <- df_long %>%
   filter(!is.na(Sample_ID))

```

```{r}
# Get unique Nutrients
unique_nutrients <- unique(df_long$Nutrients)

# Create a separate figure for each Station_ID
for (nutrient in unique_nutrients) {
 nutrient_data <- df_long%>%
    filter(Nutrients == nutrient)
  
  nutrient_plot <- nutrient_data %>%
    filter(!is.na(Sample_ID)) %>%
    ggplot(aes(x = Location, y = Level, color = Treatment)) +
    geom_boxplot() +
    labs(title = paste("Levels of Nutrient", nutrient),
         x = "Location",
         y = "Nutrient level",
         color = "Treatment type") +
    theme_minimal() +
    scale_color_viridis_d() + 
    theme(legend.position = "bottom")
  
  print(nutrient_plot)
}


```

There's some clear differences between the locations:

-   **NO3-N:** BSM has slightly higher levels, but prob not significantly so, the other two have about 0. The mean at BSM is almost max 1, but has outliers in the range 12-80.

-   **NH4-N:** BSM and HM similar levels (about 30), while VSM has very little (about 3?)

-   **Ca:** Lowest at HM, medium at BSM and highest at VSM, perhaps not significant between BSM and VSM, but prob for HM vs rest. Levels between 500 and 800

-   **Mg:** Lowest at BSM (but only one measurement in all treatments? hm), prob not significantly different between HM and VSM, but higher at HM (levels 1000-1200, BSM 750)

-   **K**: Clearly difference in treatments: Higher in M and SP vs C at all locations (levels ca 50-70 in M, 20-25 in C). No differences between locations

-   **P:** Almost 0 at BSM, 1-2 at HM and 2-3 at VSM?

-   **Fe:** Higher at BSM and HM than VSM. Maybe slightly higher in M vs C, but prob not significant. Levels 150-250 and almost 0

-   **Mn:** Very low levels at BSM and HM (near 0), while high at VSM (17ish)

-   **Cu:** Similarily low at BSM and HM (around 0.1), while slightly higher at VSM (mean almost same, 0.2ish, but clearly longer upper tail)

-   **Zn**: Only measurement from SP at BSM? The SP matches M at HM (about 4), while C is much lower (1-1.5). Only measurement from C at VSM (and maybe also only one measurement?) which is way higher (10)

-   **B**: Similar at all locations and treatments (levels 0.2-0.4)

-   **S:** Seems to be lower in M and SP than C. Somewhat lower at HM (300ish and 200ish) than BSM (500ish and 300ish), highest at VSM (700ish and 500ish)

-   **Pb:** Similar at all locations and treatments (levels 0.1-0.3)

-   **Al:** Lowest at HM (levels 20ish), medium at BSM (levels 75ish-but lower in SP(50)), highest at VSM (levels 125)

-   **Cd**: Registered levels at BSM (0.03-0.05), while 0 levels at HM and VSM

### Lists of means and sd

```{r}
# Calculate overall mean and standard deviation for each nutrient
overall_stats <- df %>%
  summarise(across(NO3_N:Cd, list(mean = ~ mean(. , na.rm = TRUE), 
                                  sd = ~ sd(. , na.rm = TRUE)))) %>%
pivot_longer(cols = everything(),
               names_to = c("Nutrient", ".value"),
               names_pattern = "(.+)_(.+)")

# Display overall statistics
overall_stats
```

```{r}
# Calculate mean, standard deviation, and sample size per location
location_stats <- df %>%
  group_by(Location) %>%
  summarise(across(NO3_N:Cd, list(mean = ~ mean(., na.rm = TRUE), 
                                  sd = ~ sd(., na.rm = TRUE)),
                   .names = "{col}_{fn}")) %>%
  pivot_longer(cols = -Location,
               names_to = c("Nutrient", ".value"),
               names_pattern = "(.+)_(.+)") %>%
  ungroup()

# Display statistics per location
location_stats
```

```{r}
# Calculate mean and standard deviation per treatment
treatment_stats <- df %>%
  group_by(Treatment) %>%
  summarise(across(NO3_N:Cd, list(mean = ~ mean(., na.rm = TRUE), 
                                  sd = ~ sd(., na.rm = TRUE)),
                   .names = "{col}_{fn}")) %>%
  pivot_longer(cols = -Treatment,
               names_to = c("Nutrient", ".value"),
               names_pattern = "(.+)_(.+)") %>%
  ungroup()

# Display statistics per treatment
treatment_stats
```

### Density plot

```{r}
# Basic density
denplot <- 
  ggplot(df_long, aes(x=Level, y=Nutrients, fill=Nutrients)) + # colored filling and outline
 geom_density_ridges(
   quantile_lines = TRUE, scale = 0.9, alpha = 0.4,
    vline_width = 0.2, vline_color = "black", rel_min_height = 0.01) +
  scale_color_brewer(palette="Dark2") +
  theme_minimal()
  
print(denplot)


#mu <- df_long %>% 
#  plyr::ddply("Nutrients", summarise, grp.mean=mean(Level)) %>%
#  mutate(Nutrients, as.factor(Nutrients))

# geom_vline(data=mu, aes(xintercept=grp.mean,
  #         color=Nutrients, linetype="dashed"))  #Add mean line
  #scale_color_brewer(palette="Dark2") #set color scheme

# geom_density_ridges(rel_min_height = 0.01) # cuts trailing trails
#+ geom_density_ridges(scale = 0.9) control the extent of overlapping between densities, 0.9 -> not quite touching

```

```{r}
# Density plot per treatment

denplot_treatment <- 
  ggplot(df_long, aes(x=Level, y=Treatment, fill=Treatment)) + # colored filling and outline
 geom_density_ridges(
   quantile_lines = TRUE, scale = 5, alpha = 0.4,
    vline_width = 0.2, vline_color = "black", rel_min_height = 0.01) +
  scale_color_brewer(palette="Dark2") +
  theme_minimal() +
  facet_wrap(~ Nutrients, scales = "free_x")

  
print(denplot_treatment)
```

I need to adjust this to only include the treatments C and M. The samples from S(SP) could simply be renamed to M, as they also contain M and the added Sphagnum shouldn't make for a big difference.

```{r}
df_long2 <- df_long %>%
  mutate(Treatment = if_else(Treatment == 'SP', 'M', Treatment))
```

```{r}
# Density plot per treatment

denplot_treatment2 <- 
  ggplot(df_long2, aes(x=Level, y=Treatment, fill=Treatment)) + # colored filling and outline
 geom_density_ridges(
   quantile_lines = TRUE, scale = 5, alpha = 0.4,
    vline_width = 0.2, vline_color = "black", rel_min_height = 0.01) +
  scale_color_brewer(palette="Dark2") +
  theme_minimal() +
  theme(legend.position = 'none') +
  facet_wrap(~ Nutrients, scales = "free_x")

  
print(denplot_treatment2)
ggsave(denplot_treatment2, filename='../figures/densityplot_nutrients_treatment.png')
```

```{r}
#Density plot per location
denplot_loc <- 
  ggplot(df_long, aes(x=Level, y=Location, fill=Location)) + # colored filling and outline
 geom_density_ridges(
   quantile_lines = TRUE, scale = 5, alpha = 0.4,
    vline_width = 0.2, vline_color = "black", rel_min_height = 0.01) +
  scale_color_brewer(palette="Dark2") +
  theme_minimal() +
  theme(legend.position = 'none') +
  facet_wrap(~ Nutrients, scales = "free_x")
xlim(0, NA)  # Set the lower bound of x-axis to 0 and leave the upper bound automatic
  
print(denplot_loc)
ggsave(denplot_loc, filename='../figures/densityplot_nutrients_location.png')
```

# Analyses of nutrient variation

## Histograms

I can exclude models for B, Pb which have similar levels at all locations and treatments.

```{r}
# Function to calculate binwidth based on the range of values
calculate_binwidth <- function(Level) {
  range <- max(Level) - min(Level)
  # Adjust the factor to control the binwidth
  binwidth <- range / 30  # Divide by 30 for roughly 30 bins, adjust as needed
  return(binwidth)
}

# Create histograms with dynamic binwidth
df_long %>%
  filter(!is.na(Level)) %>%
  split(.$Nutrients) %>%
  map(~ {
    binwidth <- calculate_binwidth(.x$Level)
    plot <- ggplot(data = .x, aes(x = Level)) +
      geom_histogram(binwidth = binwidth, fill = "blue", color = "black", alpha = 0.7) +
      labs(title = paste("Histogram of", unique(.x$Nutrients), "Level"),
           x = "Level",
           y = "Frequency")
    ggsave(filename = paste0("Histogram_of_", unique(.x$Nutrients), ".png"), plot = plot)
    plot
  }) -> histograms

# Display the histograms
walk(histograms, print)
```

Some are normally distributed-ish, while a few is right-skewed with a lot of zeros or low values.

## Ordination

```{r}

# Prepare the data
nutrient_data <- df %>%
  filter(!is.na(Sample_ID)) %>%
  select(Location, Treatment, NO3_N:Cd)

# Standardize the nutrient data
nutrient_matrix <- nutrient_data %>%
  select(NO3_N:Cd) %>%
  as.matrix()

nutrient_matrix
```

```{r}
# Perform PCA
pca_result <- rda(nutrient_matrix, scale = TRUE)

# Extract PCA scores
pca_scores <- scores(pca_result, display = "sites") %>%
  as_tibble() %>%
  bind_cols(nutrient_data %>% select(Location, Treatment))

# Extract PCA loadings for nutrients
pca_loadings <- scores(pca_result, display = "species") %>%
  as_tibble(rownames = "Nutrient")

# Create the PCA plot with nutrient labels
pca_plot <- ggplot(pca_scores, aes(x = PC1, y = PC2)) +
  geom_point(aes(color = Location, shape = Treatment), size = 3) +
  stat_ellipse(aes(group = Treatment, color = Treatment), type = "norm", level = 0.95) +
  geom_text(data = pca_loadings, aes(x = PC1, y = PC2, label = Nutrient), color = "black", vjust = 1.5) +
  labs(title = "PCA of Nutrient Levels by Location and Treatment",
       x = "PC1",
       y = "PC2") +
  theme_minimal()

# Display the plot
print(pca_plot)

ggsave("pca_nutrient_levels.png", plot = pca_plot, width = 10, height = 8, dpi = 300)

```

I only have nutrient measurements from treatment S (SP) at BSM, as this was something I supplementet with the second year.

Let's test the PCA with renaming all the SP as M.

```{r}
# Prepare the data
nutrient_data2 <- df %>%
  filter(!is.na(Sample_ID)) %>%
  select(Location, Treatment, NO3_N:Cd) %>%
  mutate(Treatment = if_else(Treatment == 'SP', 'M', Treatment))

# Standardize the nutrient data
nutrient_matrix2 <- nutrient_data2 %>%
  select(NO3_N:Cd) %>%
  as.matrix()
```

```{r}
# Perform PCA
pca_result2 <- rda(nutrient_matrix2, scale = TRUE)

# Extract PCA scores
pca_scores2 <- scores(pca_result2, display = "sites") %>%
  as_tibble() %>%
  bind_cols(nutrient_data2 %>% select(Location, Treatment))

# Extract PCA loadings for nutrients
pca_loadings2 <- scores(pca_result2, display = "species") %>%
  as_tibble(rownames = "Nutrient")


```

```{r}
# Create the PCA plot with nutrient labels
pca_plot2 <- ggplot(pca_scores2, aes(x = PC1, y = PC2)) +
  geom_point(aes(color = Location, shape = Treatment), size = 3) +
  stat_ellipse(aes(group = Treatment, color = Treatment), type = "norm", level = 0.95) +
  geom_segment(data = pca_loadings2, aes(x = 0, y = 0, xend = PC1, yend = PC2),
               arrow = arrow(length = unit(0.3, "cm")), color = "blue", alpha = 0.8) +
  geom_text(data = pca_loadings2, aes(x = PC1, y = PC2, label = Nutrient), color = "black", vjust = 1.5) +
  labs(title = "PCA of Nutrient Levels by Location and Treatment",
       x = "PC1",
       y = "PC2") +
  theme_minimal()

# Display the plot
print(pca_plot2)

#ggsave("pca_nutrient_levels_2.png", plot = pca_plot2, width = 10, height = 8, dpi = 300)
```

```{r}
# Extract variance explained by each principal component
variance_explained <- summary(pca_result2)$cont$importance[2, ]

# Extract loadings for each nutrient
loadings <- scores(pca_result2, display = "species")

# Combine variance explained and loadings into a tibble for easy viewing
pca_summary <- tibble(
  Component = rownames(loadings),
  Variance_Explained_PC1 = variance_explained[1],
  Variance_Explained_PC2 = variance_explained[2],
  Loading_PC1 = loadings[, 1],
  Loading_PC2 = loadings[, 2]
)

# Display the PCA summary
print(pca_summary)
```

```{r}
pca_summary_sorted_by_PC1 <- pca_summary %>%
  arrange(desc(Loading_PC1))
print("PCA Summary sorted by Loading_PC1:")
print(pca_summary_sorted_by_PC1)
```

```{r}
# Sort and display PCA summary by Loading_PC2
pca_summary_sorted_by_PC2 <- pca_summary %>%
  arrange(desc(Loading_PC2))
print("PCA Summary sorted by Loading_PC2:")
print(pca_summary_sorted_by_PC2)
```
