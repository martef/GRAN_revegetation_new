---
title: "1.4 Data exploration soil temp"
author: "MarteF"
format: html
editor: visual
---

## Packages needed

```{r}
library(tidyverse)
library(lubridate)
library(readr)
library(timetk)

```

## Uploading and cleaning data

```{r}
soil <- readr::read_delim('../data/soil_temp_good.csv', 
                                  delim = ',',
                                  col_names = TRUE)

soil <- soil %>%
  mutate_at(c('Location', 'Sublocation', 'Block', 'Treatment', 'Logger_ID'), as.factor) %>%
  dplyr::select(-c(`End Of File (LGR S/N: 20857999)`, `End Of File (LGR S/N: 20858002)`, `End Of File (LGR S/N: 20857975)`, 'remove_data')) %>%
  mutate(year=year(DateTime))



```

## Visualize the data

```{r}
# Get unique loggers
unique_loggers <- unique(soil$Logger_ID)

# Create a list to store individual plots
plots_list <- list()

# Loop through each logger
for (logger in unique_loggers) {
  # Filter data for the current logger
  logger_data <- soil %>%
    filter(Logger_ID == logger)

  # Print the number of rows for the current logger (for debugging)
  print(paste("Logger:", logger, "Rows:", nrow(logger_data)))
  
  # Create a plot for the current logger
  soil_plot <- logger_data %>%
    ggplot(aes(x = DateTime, y = Temp)) +
    geom_line(na.rm = TRUE) +
    labs(title = paste("Soil Temp", logger),
         x = "DateTime",
         y = "Soil Temp",
         ) +
    theme_minimal()
  
  # Print the number of rows for the current logger (for debugging)
  print(paste("Logger:", logger, "Rows:", nrow(logger_data)))
  
  # Store the plot in the list
  plots_list[[as.character(logger)]] <- soil_plot
}

# Check the length of the plots_list
print(paste("Length of plots_list:", length(plots_list)))

# Print the plots from the list
for (logger_plot in plots_list) {
  print(logger_plot)
}
```

## Compare C and M

### Visually

```{r}
 soil_plot <- soil %>%
    ggplot(aes(x = DateTime, y = Temp, color=Treatment)) +
    geom_line(na.rm = TRUE) +
    labs(title = "Soil Temp",
         x = "DateTime",
         y = "Soil Temp") +
    theme_minimal()+
   facet_wrap(Treatment~.)
 
 soil_plot
```

There could be a difference here. The peaks seems lower in M, especially first season (2021) and in the third (2023). While they look a lot more similar in second (2022).

The data from 2022 includes many loggers that might have been pushed up towards the surface, so might not be fully reliable.

There seem to be some sampling in 2023, but I think that is only one logger, and should be removed.

```{r}
soil %>%
  filter(year(DateTime)=='2023') %>%
  distinct(Logger_ID)
```

```{r}
# Filter data to exclude year 2023, as that is only one logger
soil <- soil %>%
filter(year(DateTime) !="2023")
```

### Histogram

```{r}
# Manual specification of breakpoints
breaks <- c(-10,-9,-8,-7,-6,-5,-4,-3, -2, -1, 0, 1, 2, 3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30, 31,32,33,34,35,36,37,38)

min(soil$Temp)
# Plotting histogram
hist(soil$Temp, breaks = breaks, xlab = "Temperatures")

```

The data ALMOST look normally distributed, with the extreme exception of temperatures around 0...

I'm not really interested in the winter temperatures. If I subset the data to only growth season, I might just loose most of this issue, and end up with normally distributed data.

```{r}
# Filter data to include only dates from 1 May to September 30 each year
soil_growth <- soil %>%
  filter(format(DateTime, "%m-%d") >= "05-01" & format(DateTime, "%m-%d") <= "09-30")

# View the results
head(soil_growth)
```

```{r}
# Plotting histogram
hist(soil_growth$Temp, breaks = breaks, xlab = "Temperatures")
```

Way better!

Exporting the growth season data.

```{r}
write.csv(soil_growth, file="../data/soil_growth.csv")
```

```{r}
soil_plot2 <- soil_growth %>%
    ggplot(aes(x = DateTime, y = Temp, color=Treatment)) +
    geom_line(na.rm = TRUE) +
    labs(title = "Soil Temp",
         x = "DateTime",
         y = "Soil Temp") +
    theme_minimal()+
   facet_wrap(Treatment~.)
 
 soil_plot2
```

## Create monthly means, max and min

```{r}
#Daily means
soil_daily <- soil_growth %>%
  group_by(Location, Sublocation, Block, Treatment, Logger_ID, year) %>%
 summarise_by_time(.date_var=DateTime,
                    .by="day",
                    daily_mean = mean(Temp), daily_max = max(Temp), daily_min= min(Temp))

write.csv(soil_daily, file="../data/soil_daily.csv")
soil_daily


```

```{r}
soil_monthly <- soil_growth %>% 
 group_by(Location, Sublocation, Block, Treatment, Logger_ID, year)%>%
  summarise_by_time(.date_var=DateTime, 
                    .by="month",
                    monthly_mean = mean(Temp), monthly_max = max(Temp), monthly_min = min(Temp) )

soil_monthly <- soil_monthly %>%
  mutate(month = factor(format(DateTime, '%B'), levels = month.name))

print(soil_monthly)
#write.csv(soil_monthly, file='../data/soil_monthly.csv')
```

```{r}
soil_mean_season <-soil_growth %>%
  group_by(Location, Sublocation, Block, Treatment, Logger_ID, year)%>%
  summarise_by_time(.date_var=DateTime,
                    .by="year", soil_gs_mean = mean(Temp), soil_gs_max = max(Temp), soil_gs_min = min(Temp) )
soil_mean_season

#write.csv(soil_mean_season, file='../data/soil_mean_season.csv')
```

# Daily fluctuations

```{r}
# Calculate daily temperature fluctuations 
soil_growth_fluctuations <- soil_growth %>%   mutate(Date = as.Date(DateTime)) %>%  # Extract date from DateTime   
  group_by(Location, Sublocation, Block, Treatment, Date) %>%  # Group by Location, Sublocation, Block, Treatment, and Date   
  summarise(     Temp_max = max(Temp, na.rm = TRUE),  # Calculate daily max temperature     
                 Temp_min = min(Temp, na.rm = TRUE),  # Calculate daily min temperature     
                 Temp_fluctuation = Temp_max - Temp_min  # Calculate daily fluctuation   
                 ) %>%   
  ungroup()  # Ungroup the data 

#Subset the data for specific years and locations 
soil_growth_fluctuations_subset <- soil_growth_fluctuations %>%   
  filter(     (Location %in% c("HM", "VSM") & year(Date) == 2020) |     (Location == "BSM" & year(Date) == 2021)   
              )  

# View the result 
glimpse(soil_growth_fluctuations_subset)  
```

```{r}
soil_plot3 <- soil_growth_fluctuations_subset %>%     
  ggplot(aes(x = Date, y = Temp_fluctuation, color=Treatment)) +     
  geom_line(na.rm = TRUE) +     
  labs(x = "Date",          
       y = "Temp fluctuation") +    
  theme_minimal()+    
  facet_wrap(Location~Sublocation~Block)    

soil_plot3
```

The logger at HM2-1 is not responding the same as the others. I have to conclude that this one has not recorded correctly, and will remove it as an outlier. This also means I have to go back to edit the max,min,mean dataset.

```{r}
soil_growth_fluctuations_subset <- soil_growth_fluctuations_subset %>%   
  filter(!(Location == "HM" & Sublocation == "2" & Block == "1"))  # Remove specific outlier
```

```{r}
# Summary per Location/Sublocation/Block/Treatment 
summary_location_sublocation_block_treatment <- soil_growth_fluctuations_subset %>%   
  group_by(Location, Sublocation, Block, Treatment) %>%   
  summarise(     Avg_Temp_Fluctuation = mean(Temp_fluctuation, na.rm = TRUE),     
                 Max_Temp_Fluctuation = max(Temp_fluctuation, na.rm = TRUE),     
                 Min_Temp_Fluctuation = min(Temp_fluctuation, na.rm = TRUE)   )  

#Summary per Location/Sublocation/Treatment 
summary_location_sublocation_treatment <- soil_growth_fluctuations_subset %>%   
  group_by(Location, Sublocation, Treatment) %>%   
  summarise(     Avg_Temp_Fluctuation = mean(Temp_fluctuation, na.rm = TRUE),     
                 Max_Temp_Fluctuation = max(Temp_fluctuation, na.rm = TRUE),     
                 Min_Temp_Fluctuation = min(Temp_fluctuation, na.rm = TRUE)   )   

# Summary by Treatment 
summary_treatment <- soil_growth_fluctuations_subset %>%   
  group_by(Treatment) %>%   
  summarise(     Avg_Temp_Fluctuation = mean(Temp_fluctuation, na.rm = TRUE),     
                 Max_Temp_Fluctuation = max(Temp_fluctuation, na.rm = TRUE),     
                 Min_Temp_Fluctuation = min(Temp_fluctuation, na.rm = TRUE)   )  

# View the summaries 
print(summary_location_sublocation_block_treatment) 
print(summary_location_sublocation_treatment) 
print(summary_treatment) 
```

## Plot

```{r}
soil_plot4 <- soil_growth_fluctuations_subset %>%     
  ggplot(aes(x = Date, y = Temp_fluctuation, color=Treatment)) +     
  geom_line(na.rm = TRUE) +     
  labs(x = "Date",          
       y = "Temp fluctuation") +     
  theme_minimal()+    
  facet_wrap(Location~Sublocation)    

soil_plot4
```

## Edit the soil mean season dataset to remove outlier, only include first growth season, and add fluctuations

```{r}

#Subset dataset
temp_y0 <- soil_growth %>%   
  filter(!(Location == "HM" & Sublocation == "2" & Block == "1")) %>% # Remove specific outlier
  filter(     
    (Location %in% c("HM", "VSM") & year(DateTime) == 2020) |     (Location == "BSM" & year(DateTime) == 2021))   #Subset the data for specific years and locations 
              
temp_mean_y0 <-temp_y0 %>%
  group_by(Location, Sublocation, Block, Treatment, Logger_ID, year)%>%
  summarise_by_time(.date_var=DateTime,
                    .by="year", soil_gs_mean = mean(Temp), soil_gs_max = max(Temp), soil_gs_min = min(Temp) )
temp_mean_y0

#Add the fluctuation data

temp_mean_y0 <- temp_mean_y0 %>%
  full_join(summary_location_sublocation_block_treatment, by = c('Location', 'Sublocation', 'Block', 'Treatment'))

temp_mean_y0
write.csv(temp_mean_y0, file='../data/temp_mean_y0.csv')
```

## Summary

```{r}
se <- function(x) {
  sd(x) / sqrt(length(x))
}

```

```{r}
#Overall summary by Treatment
overall_summary <- temp_mean_y0 %>%
  group_by(Treatment) %>%
  summarise(
    temp_mean = mean(soil_gs_mean, na.rm = TRUE),
    se_temp_mean = se(soil_gs_mean),
    temp_max = mean(soil_gs_max, na.rm = TRUE),
    se_temp_max = se(soil_gs_max),
    temp_min = mean(soil_gs_min, na.rm = TRUE),
    se_temp_min = se(soil_gs_min),
    fluc_mean = mean(Avg_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_mean = se(Avg_Temp_Fluctuation),
    fluc_min = mean(Min_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_min = se(Min_Temp_Fluctuation),
    fluc_max = mean(Max_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_max = se(Max_Temp_Fluctuation)    
  )

print(overall_summary)
```

```{r}
#Summary by Location and Treatment
location_summary <- temp_mean_y0 %>%
  group_by(Location, Treatment) %>%
  summarise(
    temp_mean = mean(soil_gs_mean, na.rm = TRUE),
    se_temp_mean = se(soil_gs_mean),
    temp_max = mean(soil_gs_max, na.rm = TRUE),
    se_temp_max = se(soil_gs_max),
    temp_min = mean(soil_gs_min, na.rm = TRUE),
    se_temp_min = se(soil_gs_min),
    fluc_mean = mean(Avg_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_mean = se(Avg_Temp_Fluctuation),
    fluc_min = mean(Min_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_min = se(Min_Temp_Fluctuation),
    fluc_max = mean(Max_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_max = se(Max_Temp_Fluctuation)    
  )

print(location_summary)
```

```{r}
#Summary by Location and Treatment
location_summary <- temp_mean_y0 %>%
  group_by(Location, Treatment, Sublocation) %>%
  summarise(
    temp_mean = mean(soil_gs_mean, na.rm = TRUE),
    se_temp_mean = se(soil_gs_mean),
    temp_max = mean(soil_gs_max, na.rm = TRUE),
    se_temp_max = se(soil_gs_max),
    temp_min = mean(soil_gs_min, na.rm = TRUE),
    se_temp_min = se(soil_gs_min),
    fluc_mean = mean(Avg_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_mean = se(Avg_Temp_Fluctuation),
    fluc_min = mean(Min_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_min = se(Min_Temp_Fluctuation),
    fluc_max = mean(Max_Temp_Fluctuation, na.rm=TRUE),
    se_fluc_max = se(Max_Temp_Fluctuation) 
  )

print(location_summary)
```
